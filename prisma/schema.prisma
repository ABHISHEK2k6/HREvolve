generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole  @default(USER)
  userType         UserType  @default(MEMBER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  department       String?
  position         String?
  phone            String?
  isActive         Boolean   @default(false)
  normalizedEmail  String?   @unique
  designation      String?
  experience       String?
  expertise        String?
  interests        String?
  linkedinUrl      String?
  organization     String?
  profileCompleted Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
  partner          Partner?
}

model Partner {
  id                    String            @id @default(cuid())
  userId                String            @unique
  companyName           String
  businessType          String
  partnershipGoals      String?
  servicesOffered       String?
  targetAudience        String?
  companySize           String?
  yearEstablished       String?
  website               String?
  linkedinProfile       String?
  contactPerson         String?
  contactEmail          String?
  contactPhone          String?
  businessDescription   String?
  expectedBenefits      String?
  previousPartnerships  String?
  additionalInfo        String?
  profileCompleted      Boolean           @default(false)
  partnershipStatus     PartnershipStatus @default(PENDING)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([businessType])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  date        DateTime
  location    String?
  type        EventType @default(UPCOMING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?

  @@index([type, date])
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  status    String   @default("unread")

  @@index([createdAt])
}

enum UserRole {
  USER
  ADMIN
  HR_MANAGER
}

enum UserType {
  MEMBER
  PARTNER
}

enum PartnershipStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum EventType {
  UPCOMING
  PAST
  FEATURED
}
